import logging
from aiogram import Router, F
from aiogram.enums import ContentType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery

from FSM import FSMPrompt
from database.db import Database
from aiogram.handlers import PreCheckoutQueryHandler

router = Router()


@router.message(Command(commands=['cancel']))
async def cancel(message: Message, state: FSMContext):
    try:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –µ–≥–æ –æ—á–∏—Å—Ç–∫–∞
        current_state = await state.get_state()
        if current_state is not None:
            await state.clear()
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /cancel: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")


@router.message(Command(commands=['start']))
async def send_welcome(message: Message, db: Database):
    try:
        #    user_language = message.from_user.language_code
        user_id = message.from_user.id
        await db.add_user(user_id)
        logging.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ –≤ –ë–î")
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç.\n")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")


@router.message(Command(commands=['help']))
async def send_help(message: Message):
    try:
        await message.reply(f"Findplant - –±–æ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ò–ò.\n"
                            "–î–æ—Å—Ç—É–ø –∫ Chat GPT 4 + –≤–∞—à–∞ –∫–∞—Ä—Ç–æ—Ç–µ–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤.\n"
                            "üéÅ –î–µ–º–æ-–≤–µ—Ä—Å–∏—è - –¥–æ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏.\n"
                            "üí∞ –ü–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è - –¥–æ 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏. –°—Ç–æ–∏–º–æ—Å—Ç—å - 99 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü.\n"
                            "–ö–æ–º–∞–Ω–¥—ã:\n"
                            "üõí /buy - –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
                            "üìö /prompts - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø—Ä–æ–º–ø—Ç—ã\n"
                            "‚ûï /add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç\n"
                            "‚úèÔ∏è /edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç\n"
                            "‚ùå /delete - —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç\n"
                            "‚Ü©Ô∏è /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /help: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")


@router.message(Command(commands=['buy']))
async def buy_subscription(message: Message, state: FSMContext, db: Database):
    try:
        last_payment_date = await db.get_last_payment_date(message.from_user.id)
        if last_payment_date is not None:
            formatted_date = last_payment_date.strftime("%d-%m-%Y")
            await message.answer(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å {formatted_date}.")
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –µ–≥–æ –æ—á–∏—Å—Ç–∫–∞
            current_state = await state.get_state()
            if current_state is not None:
                await state.clear()  # —á—Ç–æ–±—ã —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ —Å—é–¥–∞ –∏–∑ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

            from config import config
            if config.provider_token.split(':')[1] == 'TEST':
                await message.reply("–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã: 1111 1111 1111 1026, 12/22, CVC 000.")

            prices = [LabeledPrice(label='–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞', amount=config.price)]

            await state.set_state(FSMPrompt.buying)
            from loader import bot
            await bot.send_invoice(
                chat_id=message.chat.id,
                title='–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
                description='–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü',
                payload='subscription',
                provider_token=config.provider_token,
                currency=config.currency,
                start_parameter='test',
                prices=prices
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /buy: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã!")
        current_state = await state.get_state()
        if current_state is not None:
            await state.clear()


# —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞ —Ç–∏–ø–∞ PreCheckoutQuery, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–µ—Å—è—Ç–∏ —Å–µ–∫—É–Ω–¥
@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    try:
        from loader import bot
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)  # –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–æ
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞ —Ç–∏–ø–∞ PreCheckoutQuery: {e}")


@router.message(F.successful_payment)
async def process_successful_payment(message: Message, state: FSMContext, db: Database):
    try:
        await message.reply(f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} "
                            f"{message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        await db.update_payment(message.from_user.id)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂ –æ—Ç {message.from_user.id}")
        current_state = await state.get_state()
        if current_state is not None:
            await state.clear()  # —á—Ç–æ–±—ã —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ —Å—é–¥–∞ –∏–∑ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ: {e}")


@router.message(StateFilter(FSMPrompt.buying))
async def process_unsuccessful_payment(message: Message, state: FSMContext):
    try:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂!")
        current_state = await state.get_state()
        if current_state is not None:
            await state.clear()  # —á—Ç–æ–±—ã —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ —Å—é–¥–∞ –∏–∑ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ: {e}")
